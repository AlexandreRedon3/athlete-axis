name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Job 1: Analyse statique et qualité du code
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Check TypeScript types
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

      - name: Check for unused dependencies
        run: npx depcheck --ignores="@types/*,eslint-*,prettier,tailwindcss"

      - name: Security audit
        run: npm audit --audit-level=moderate

  # Job 2: Tests unitaires
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run unit tests
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          NEXT_PUBLIC_APP_URL: http://localhost:3000

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Job 3: Build et vérification
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    env:
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
      BETTER_AUTH_SECRET: test-secret-key-for-ci
      NEXT_PUBLIC_BETTER_AUTH_URL: http://localhost:3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Check build size
        run: |
          echo "Build completed successfully"
          ls -la .next/static/

  # Job 4: Tests d'intégration (préparé pour plus tard)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-integration-tests')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

      - name: Run integration tests
        run: echo "Integration tests will be implemented later"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          NEXT_PUBLIC_APP_URL: http://localhost:3000

  # Job 5: Notification et résumé
  notify:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build]
    if: always()
    steps:
      - name: Pipeline Status
        run: |
          echo "Pipeline Status:"
          echo "- Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Pipeline failed"
            exit 1
          fi